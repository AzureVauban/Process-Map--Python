#include "Node.h" 
void populate(Node &current);
void recursivearithmetic(Node &current);
void generatateunittest();
int main()
{
    std::ofstream generatedunittest("autogeneratedtest.py");
    // prompt name of head item
    std::cout << "Name of Linked List:" << std::endl;
    std::string headname = "";
    std::getline(std::cin, headname);
    auto head = new Node(headname);
    // modify ofstream object
    generatedunittest << "\"\"\"Tentative Description: " << headname << std::endl
                      << "\"\"\"" << std::endl;
    NodeUtility::create::testclass(head,generatedunittest); // error on this line has been resolved by passing the ofstream by refrence
    // cleanup and terminate process
    generatateunittest();
    NodeUtility::destroy(head);
    return 0;
}
void populate(Node &current)
{
}
void recursivearithmetic(Node &current)
{
}
void generatateunittest()
{
    std::cout << "GENERATING UNITTEST" << std::endl;
    enum formatenumeration
    {
        white = 0,  // variable and method declaration
        purple = 1, // docstring
        green = 2,  // trailing and leading whitespace
        orange = 3  // all lowercase
    };
    //loop until all classes have been written onto the file
        //generate module docstring
        //generate unit test class
        //generate unit test methods based on program mode
    //close file
    generatedunittest.close();
}