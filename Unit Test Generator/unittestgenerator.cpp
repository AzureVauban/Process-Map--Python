#include "Node.h"
#include <cmath>
void populate(Node *current);
void recursivearithmetic(Node *current);
void inverserecursivearithmetic(Node *current);
enum programMode
{
    yin = 0,
    yang = 1
};
mode = yang;
int main()
{
    std::ofstream generatedunittest("autogeneratedtest.py");
    // prompt name of head item
    std::cout << "Name of Linked List:" << std::endl;
    std::string headname = "";
    std::getline(std::cin, headname);
    auto head = new Node(headname);
    // prompt ingredient
    populate(head);
    // set assert values
    if (yin)
    {
        recursivearithmetic(head);
    }
    else
    {
        inverserecursivearithmetic(head);
    }
    // cleanup and terminate process
    NodeUtility::generatateunittest(head, generatedunittest);
    NodeUtility::destroy(head);
    return 0;
}
void populate(Node *current)
{
    std::cout << "What ingredients do you need to create " << current->ingredient << ":" << std::endl;
    // create input loop
    std::string myinput = "";
    std::vector <std::string> userinputs;
    do
    {
        std::getline(std::cin, myinput);
        //strip leading and trailing whitespace
        
    } while (myinput.empty());
    // create new node instances
    // continue function recursively by iterating itself onto children instances
}
void recursivearithmetic(Node *current)
{
    // create assert values
}
void inverserecursivearithmetic(Node *current)
{
    // create assert values
}
